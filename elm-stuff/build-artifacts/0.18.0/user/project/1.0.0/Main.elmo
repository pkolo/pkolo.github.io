var _user$project$Main$viewSearchResult = function (result) {
	return A2(
		_elm_lang$html$Html$li,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Anything'),
			_1: {ctor: '[]'}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('content'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$header,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$h1,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('ElmHub'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Like GitHub, but for Elm things.'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$ul,
					{ctor: '[]'},
					A2(_elm_lang$core$List$map, _user$project$Main$viewSearchResult, model.results)),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$Model = function (a) {
	return {results: a};
};
var _user$project$Main$SearchResult = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {id: a, name: b, timeline: c, status: d, categories: e, technologies: f, link: g, src_link: h, description: i};
	});
var _user$project$Main$searchResultDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'description',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'src_link',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'link',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'technologies',
				_elm_lang$core$Json_Decode$string,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'categories',
					_elm_lang$core$Json_Decode$string,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'status',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'timeline',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'name',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$int,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$SearchResult))))))))));
var _user$project$Main$responseDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'projects',
	_elm_lang$core$Json_Decode$list(_user$project$Main$searchResultDecoder),
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_elm_lang$core$Basics$identity));
var _user$project$Main$decodeResults = function (json) {
	var _p0 = A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Main$responseDecoder, json);
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return {ctor: '[]'};
	}
};
var _user$project$Main$initialModel = {
	results: _user$project$Main$decodeResults(_user$project$Data$json)
};
var _user$project$Main$update = F2(
	function (msg, model) {
		return _user$project$Main$initialModel;
	});
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{view: _user$project$Main$view, model: _user$project$Main$initialModel, update: _user$project$Main$update})();
var _user$project$Main$SetQuery = function (a) {
	return {ctor: 'SetQuery', _0: a};
};
