var _user$project$Main$statusStyle = function (status) {
	var _p0 = status;
	switch (_p0) {
		case 'Active':
			return _user$project$NewStyle$Active;
		case 'Inactive':
			return _user$project$NewStyle$Inactive;
		case 'In Progress':
			return _user$project$NewStyle$InProgress;
		default:
			return _user$project$NewStyle$Inactive;
	}
};
var _user$project$Main$projectMeta = function (p) {
	return A3(
		_mdgriffith$style_elements$Element$row,
		_user$project$NewStyle$None,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$spacing(7),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(
				_mdgriffith$style_elements$Element$el,
				_user$project$NewStyle$ProjectTitle,
				{
					ctor: '::',
					_0: _mdgriffith$style_elements$Element_Attributes$alignBottom,
					_1: {ctor: '[]'}
				},
				_mdgriffith$style_elements$Element$text(p.name)),
			_1: {
				ctor: '::',
				_0: A3(
					_mdgriffith$style_elements$Element$el,
					_user$project$Main$statusStyle(p.status),
					{
						ctor: '::',
						_0: _mdgriffith$style_elements$Element_Attributes$alignBottom,
						_1: {ctor: '[]'}
					},
					_mdgriffith$style_elements$Element$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'(',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$String$toLower(p.status),
								')')))),
				_1: {
					ctor: '::',
					_0: A2(
						_mdgriffith$style_elements$Element$newTab,
						p.link,
						A3(
							_mdgriffith$style_elements$Element$el,
							_user$project$NewStyle$Link,
							{
								ctor: '::',
								_0: _mdgriffith$style_elements$Element_Attributes$alignBottom,
								_1: {ctor: '[]'}
							},
							_mdgriffith$style_elements$Element$text('link'))),
					_1: {
						ctor: '::',
						_0: A2(
							_mdgriffith$style_elements$Element$newTab,
							p.src_link,
							A3(
								_mdgriffith$style_elements$Element$el,
								_user$project$NewStyle$Link,
								{
									ctor: '::',
									_0: _mdgriffith$style_elements$Element_Attributes$alignBottom,
									_1: {ctor: '[]'}
								},
								_mdgriffith$style_elements$Element$text('src'))),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$footer = A3(
	_mdgriffith$style_elements$Element$column,
	_user$project$NewStyle$None,
	{
		ctor: '::',
		_0: _mdgriffith$style_elements$Element_Attributes$paddingTop(30),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A3(
			_mdgriffith$style_elements$Element$el,
			_user$project$NewStyle$None,
			{ctor: '[]'},
			_mdgriffith$style_elements$Element$text('Â© Patrick Kolodgy, 2017')),
		_1: {
			ctor: '::',
			_0: A3(
				_mdgriffith$style_elements$Element$row,
				_user$project$NewStyle$None,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A3(
						_mdgriffith$style_elements$Element$el,
						_user$project$NewStyle$None,
						{ctor: '[]'},
						_mdgriffith$style_elements$Element$text('Written in Elm')),
					_1: {
						ctor: '::',
						_0: A3(
							_mdgriffith$style_elements$Element$el,
							_user$project$NewStyle$None,
							{ctor: '[]'},
							_mdgriffith$style_elements$Element$text(' | ')),
						_1: {
							ctor: '::',
							_0: A2(
								_mdgriffith$style_elements$Element$newTab,
								'https://github.com/pkolo/pkolo.github.io',
								A3(
									_mdgriffith$style_elements$Element$el,
									_user$project$NewStyle$Link,
									{ctor: '[]'},
									_mdgriffith$style_elements$Element$text('src'))),
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$navBar = A3(
	_mdgriffith$style_elements$Element$row,
	_user$project$NewStyle$Nav,
	{
		ctor: '::',
		_0: _mdgriffith$style_elements$Element_Attributes$spacing(10),
		_1: {
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$paddingTop(4),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A3(
			_mdgriffith$style_elements$Element$el,
			_user$project$NewStyle$None,
			{ctor: '[]'},
			_mdgriffith$style_elements$Element$text('Brooklyn, NY')),
		_1: {
			ctor: '::',
			_0: A3(
				_mdgriffith$style_elements$Element$el,
				_user$project$NewStyle$None,
				{ctor: '[]'},
				_mdgriffith$style_elements$Element$text('pkolodgy at gmail')),
			_1: {
				ctor: '::',
				_0: A2(
					_mdgriffith$style_elements$Element$newTab,
					'http://github.com/pkolo',
					A3(
						_mdgriffith$style_elements$Element$el,
						_user$project$NewStyle$Link,
						{ctor: '[]'},
						_mdgriffith$style_elements$Element$text('github'))),
				_1: {
					ctor: '::',
					_0: A2(
						_mdgriffith$style_elements$Element$newTab,
						'https://www.linkedin.com/in/pkolodgy/',
						A3(
							_mdgriffith$style_elements$Element$el,
							_user$project$NewStyle$Link,
							{ctor: '[]'},
							_mdgriffith$style_elements$Element$text('linkedin'))),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$header = function (bio) {
	return A3(
		_mdgriffith$style_elements$Element$column,
		_user$project$NewStyle$Header,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$paddingBottom(25),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(
				_mdgriffith$style_elements$Element$el,
				_user$project$NewStyle$Title,
				{
					ctor: '::',
					_0: _mdgriffith$style_elements$Element_Attributes$moveLeft(2),
					_1: {ctor: '[]'}
				},
				_mdgriffith$style_elements$Element$text('Patrick Kolodgy')),
			_1: {
				ctor: '::',
				_0: _user$project$Main$navBar,
				_1: {
					ctor: '::',
					_0: A3(
						_mdgriffith$style_elements$Element$el,
						_user$project$NewStyle$None,
						{
							ctor: '::',
							_0: _mdgriffith$style_elements$Element_Attributes$paddingTop(12),
							_1: {ctor: '[]'}
						},
						_mdgriffith$style_elements$Element$text(bio)),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$flattenTags = function (project) {
	var newProject = project;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		newProject.categories,
		A2(
			_elm_lang$core$Basics_ops['++'],
			newProject.technologies,
			{
				ctor: '::',
				_0: newProject.status,
				_1: {ctor: '[]'}
			}));
};
var _user$project$Main$filterProjects = F2(
	function (model, newFilter) {
		var newProjects = A2(
			_elm_lang$core$List$filter,
			function (p) {
				return A2(
					_elm_lang$core$List$member,
					newFilter,
					_user$project$Main$flattenTags(p));
			},
			model.projects);
		return _elm_lang$core$Native_Utils.update(
			model,
			{filterBy: newFilter, projects: newProjects});
	});
var _user$project$Main$uniqueHelp = F3(
	function (f, existing, remaining) {
		uniqueHelp:
		while (true) {
			var _p1 = remaining;
			if (_p1.ctor === '[]') {
				return {ctor: '[]'};
			} else {
				var _p3 = _p1._1;
				var _p2 = _p1._0;
				var computedFirst = f(_p2);
				if (A2(_elm_lang$core$Set$member, computedFirst, existing)) {
					var _v2 = f,
						_v3 = existing,
						_v4 = _p3;
					f = _v2;
					existing = _v3;
					remaining = _v4;
					continue uniqueHelp;
				} else {
					return {
						ctor: '::',
						_0: _p2,
						_1: A3(
							_user$project$Main$uniqueHelp,
							f,
							A2(_elm_lang$core$Set$insert, computedFirst, existing),
							_p3)
					};
				}
			}
		}
	});
var _user$project$Main$unique = function (list) {
	return A3(_user$project$Main$uniqueHelp, _elm_lang$core$Basics$identity, _elm_lang$core$Set$empty, list);
};
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {bio: a, projects: b, statuses: c, technologies: d, categories: e, filterBy: f};
	});
var _user$project$Main$Result = F2(
	function (a, b) {
		return {bio: a, projects: b};
	});
var _user$project$Main$Project = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {id: a, name: b, timeline: c, status: d, categories: e, technologies: f, link: g, src_link: h, description: i};
	});
var _user$project$Main$projectDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'description',
	_elm_lang$core$Json_Decode$string,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'src_link',
		_elm_lang$core$Json_Decode$string,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'link',
			_elm_lang$core$Json_Decode$string,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'technologies',
				_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'categories',
					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string),
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'status',
						_elm_lang$core$Json_Decode$string,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'timeline',
							_elm_lang$core$Json_Decode$string,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'name',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'id',
									_elm_lang$core$Json_Decode$int,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Project))))))))));
var _user$project$Main$modelDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'projects',
	_elm_lang$core$Json_Decode$list(_user$project$Main$projectDecoder),
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'bio',
		_elm_lang$core$Json_Decode$string,
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_user$project$Main$Result)));
var _user$project$Main$decodeResult = function (json) {
	var _p4 = A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Main$modelDecoder, json);
	if (_p4.ctor === 'Ok') {
		return _p4._0;
	} else {
		return {
			bio: 'Error',
			projects: {ctor: '[]'}
		};
	}
};
var _user$project$Main$initialModel = function () {
	var result = _user$project$Main$decodeResult(_user$project$Data$json);
	return {
		bio: result.bio,
		projects: result.projects,
		filterBy: '',
		statuses: _user$project$Main$unique(
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$map,
					function (p) {
						return {
							ctor: '::',
							_0: p.status,
							_1: {ctor: '[]'}
						};
					},
					result.projects))),
		technologies: _user$project$Main$unique(
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$map,
					function (p) {
						return p.technologies;
					},
					result.projects))),
		categories: _user$project$Main$unique(
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$map,
					function (p) {
						return p.categories;
					},
					result.projects)))
	};
}();
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p5 = msg;
		if (_p5.ctor === 'Clear') {
			return {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
		} else {
			return {
				ctor: '_Tuple2',
				_0: A2(_user$project$Main$filterProjects, _user$project$Main$initialModel, _p5._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$Main$UpdateFilter = function (a) {
	return {ctor: 'UpdateFilter', _0: a};
};
var _user$project$Main$tagLink = function (tag) {
	return A3(
		_mdgriffith$style_elements$Element$el,
		_user$project$NewStyle$Tag,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Events$onClick(
				_user$project$Main$UpdateFilter(tag)),
			_1: {ctor: '[]'}
		},
		_mdgriffith$style_elements$Element$text(tag));
};
var _user$project$Main$filterWidget = F2(
	function (title, tagList) {
		return A3(
			_mdgriffith$style_elements$Element$column,
			_user$project$NewStyle$None,
			{ctor: '[]'},
			A2(_elm_lang$core$List$map, _user$project$Main$tagLink, tagList));
	});
var _user$project$Main$projectTagList = F2(
	function (title, tagList) {
		return A3(
			_mdgriffith$style_elements$Element$row,
			_user$project$NewStyle$None,
			{
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$spacing(10),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$Basics_ops['++'],
				{
					ctor: '::',
					_0: A3(
						_mdgriffith$style_elements$Element$el,
						_user$project$NewStyle$None,
						{ctor: '[]'},
						_mdgriffith$style_elements$Element$text(
							A2(_elm_lang$core$Basics_ops['++'], title, ':'))),
					_1: {ctor: '[]'}
				},
				A2(_elm_lang$core$List$map, _user$project$Main$tagLink, tagList)));
	});
var _user$project$Main$project = function (p) {
	return A3(
		_mdgriffith$style_elements$Element$column,
		_user$project$NewStyle$None,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$spacing(5),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: _user$project$Main$projectMeta(p),
			_1: {
				ctor: '::',
				_0: A3(
					_mdgriffith$style_elements$Element$paragraph,
					_user$project$NewStyle$ProjectDescription,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _mdgriffith$style_elements$Element$text(p.description),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Main$projectTagList, 'Technologies', p.technologies),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Main$projectTagList, 'Categories', p.categories),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$projectList = function (projects) {
	return A3(
		_mdgriffith$style_elements$Element$column,
		_user$project$NewStyle$None,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$spacing(25),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$Main$project, projects));
};
var _user$project$Main$Clear = {ctor: 'Clear'};
var _user$project$Main$sideBar = function (model) {
	return A3(
		_mdgriffith$style_elements$Element$column,
		_user$project$NewStyle$SideBar,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$width(
				_mdgriffith$style_elements$Element_Attributes$px(180)),
			_1: {
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$spacing(10),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: A3(
				_mdgriffith$style_elements$Element$el,
				_user$project$NewStyle$SideBarTitle,
				{ctor: '[]'},
				_mdgriffith$style_elements$Element$text('Filter projects by')),
			_1: {
				ctor: '::',
				_0: A3(
					_mdgriffith$style_elements$Element$el,
					_user$project$NewStyle$Tag,
					{
						ctor: '::',
						_0: _mdgriffith$style_elements$Element_Events$onClick(_user$project$Main$Clear),
						_1: {ctor: '[]'}
					},
					_mdgriffith$style_elements$Element$text('All')),
				_1: {
					ctor: '::',
					_0: A2(_user$project$Main$filterWidget, 'Status', model.statuses),
					_1: {
						ctor: '::',
						_0: A2(_user$project$Main$filterWidget, 'Technologies', model.technologies),
						_1: {
							ctor: '::',
							_0: A2(_user$project$Main$filterWidget, 'Categories', model.categories),
							_1: {
								ctor: '::',
								_0: _user$project$Main$footer,
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$content = function (model) {
	return A3(
		_mdgriffith$style_elements$Element$row,
		_user$project$NewStyle$None,
		{
			ctor: '::',
			_0: _mdgriffith$style_elements$Element_Attributes$spacing(20),
			_1: {
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$paddingTop(2),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _user$project$Main$sideBar(model),
			_1: {
				ctor: '::',
				_0: _user$project$Main$projectList(model.projects),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$view = function (model) {
	return A2(
		_mdgriffith$style_elements$Element$layout,
		_user$project$NewStyle$stylesheet,
		A3(
			_mdgriffith$style_elements$Element$column,
			_user$project$NewStyle$Main,
			{
				ctor: '::',
				_0: _mdgriffith$style_elements$Element_Attributes$paddingLeft(17),
				_1: {
					ctor: '::',
					_0: _mdgriffith$style_elements$Element_Attributes$paddingTop(3),
					_1: {
						ctor: '::',
						_0: _mdgriffith$style_elements$Element_Attributes$width(
							_mdgriffith$style_elements$Element_Attributes$px(900)),
						_1: {ctor: '[]'}
					}
				}
			},
			{
				ctor: '::',
				_0: _user$project$Main$header(model.bio),
				_1: {
					ctor: '::',
					_0: _user$project$Main$content(model),
					_1: {ctor: '[]'}
				}
			}));
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init,
		update: _user$project$Main$update,
		view: _user$project$Main$view,
		subscriptions: function (_p6) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
